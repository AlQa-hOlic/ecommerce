// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("PLANETSCALE_PRISMA_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  role          Role           @default(USER)
  image         String?        @default("NO_IMAGE")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  wishlistItems WishlistItem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

model Product {
  id            String         @id @default(cuid())
  name          String
  sku           String         @unique @default(uuid())
  imageUrl      String
  price         Float
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  wishlistItems WishlistItem[]
}

model WishlistItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userEmail String?
  user      User?    @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userEmail, productId])
}
